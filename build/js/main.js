let obtImage=document.querySelector(".obtengo-container_left__image");function Ant(t){t=document.getElementById(t);this.crslRoot=t||document.querySelector(".ant-carousel"),this.crslList=this.crslRoot.querySelector(".ant-carousel-list"),this.crslElements=this.crslList.querySelectorAll(".ant-carousel-element"),this.crslElemFirst=this.crslList.querySelector(".ant-carousel-element"),this.leftArrow=this.crslRoot.querySelector(".ant-carousel-arrow-left"),this.rightArrow=this.crslRoot.querySelector(".ant-carousel-arrow-right"),this.indicatorDots=this.crslRoot.querySelector(".ant-carousel-dots"),console.log(this.crslRoot),this.options=Ant.defaults,Ant.initialize(this)}window.addEventListener("resize",function(t){window.innerWidth<=575?obtImage.src="./assets/images/obtengo_bg_left_mobile.png":obtImage.src="./assets/images/obtengo_bg_left.png"}),Ant.defaults={elemVisible:2,loop:!0,auto:!0,interval:3e3,speed:750,touch:!0,arrows:!0,dots:!0},Ant.prototype.elemPrev=function(i){if(i=i||1,this.options.dots&&this.dotOn(this.currentElement),this.currentElement-=i,this.currentElement<0&&(this.currentElement=this.dotsVisible-1),this.options.dots&&this.dotOff(this.currentElement),this.options.loop){let e,s,t=this;for(let t=0;t<i;t++)e=this.crslList.lastElementChild,s=e.cloneNode(!0),this.crslList.insertBefore(s,this.crslList.firstElementChild),this.crslList.removeChild(e);this.crslList.style.marginLeft="-"+this.elemWidth*i+"px";window.getComputedStyle(this.crslList).marginLeft;this.crslList.style.cssText="transition:margin "+this.options.speed+"ms ease;",this.crslList.style.marginLeft="0px",setTimeout(function(){t.crslList.style.cssText="transition:none;"},this.options.speed)}else this.currentOffset+=this.elemWidth*i,this.crslList.style.marginLeft=this.currentOffset+"px",0==this.currentElement&&(this.leftArrow.style.display="none",this.touchPrev=!1),this.rightArrow.style.display="block",this.touchNext=!0},Ant.prototype.elemNext=function(o){if(o=o||1,this.options.dots&&this.dotOn(this.currentElement),this.currentElement+=o,this.currentElement>=this.dotsVisible&&(this.currentElement=0),this.options.dots&&this.dotOff(this.currentElement),this.options.loop){let e,s,i=this;this.crslList.style.cssText="transition:margin "+this.options.speed+"ms ease;",this.crslList.style.marginLeft="-"+this.elemWidth*o+"px",setTimeout(function(){i.crslList.style.cssText="transition:none;";for(let t=0;t<o;t++)e=i.crslList.firstElementChild,s=e.cloneNode(!0),i.crslList.appendChild(s),i.crslList.removeChild(e);i.crslList.style.marginLeft="0px"},this.options.speed)}else this.currentOffset-=this.elemWidth*o,this.crslList.style.marginLeft=this.currentOffset+"px",this.currentElement==this.dotsVisible-1&&(this.rightArrow.style.display="none",this.touchNext=!1),this.leftArrow.style.display="block",this.touchPrev=!0},Ant.prototype.dotOn=function(t){this.indicatorDotsAll[t].style.cssText="background-color:#BBB; cursor:pointer;"},Ant.prototype.dotOff=function(t){this.indicatorDotsAll[t].style.cssText="background-color:#FF7100; cursor:default;"},Ant.initialize=function(i){i.elemCount=i.crslElements.length,i.dotsVisible=i.elemCount;var t=window.getComputedStyle(i.crslElemFirst);i.elemWidth=i.crslElemFirst.offsetWidth+parseInt(t.marginLeft)+parseInt(t.marginRight),i.currentElement=0,i.currentOffset=0,i.touchPrev=!0,i.touchNext=!0;let e,s,o,n,r,l,c=h();function h(){return(new Date).getTime()}function a(){i.autoScroll=setInterval(function(){var t=h();t-c+10>i.options.interval&&(c=t,i.elemNext())},i.options.interval)}if(i.elemCount<=i.options.elemVisible&&(i.options.auto=!1,i.options.touch=!1,i.options.arrows=!1,i.options.dots=!1,i.leftArrow.style.display="none",i.rightArrow.style.display="none"),i.options.loop?i.options.auto&&(a(),i.crslList.addEventListener("mouseenter",function(){clearInterval(i.autoScroll)},!1),i.crslList.addEventListener("mouseleave",a,!1)):(i.dotsVisible=i.elemCount-i.options.elemVisible+1,i.leftArrow.style.display="none",i.touchPrev=!1,i.options.auto=!1),i.options.touch&&(i.crslList.addEventListener("touchstart",function(t){e=parseInt(t.touches[0].clientX),s=parseInt(t.touches[0].clientY),r=h()},!1),i.crslList.addEventListener("touchmove",function(t){e&&s&&(o=e-parseInt(t.touches[0].clientX),n=s-parseInt(t.touches[0].clientY),l=h(),15<Math.abs(o)&&Math.abs(o)>Math.abs(n)&&l-r<75&&(r=0,i.touchNext&&0<o?(c=l,i.elemNext()):i.touchPrev&&o<0&&(c=l,i.elemPrev())))},!1)),i.options.arrows?(i.options.loop||(i.crslList.style.cssText="transition:margin "+i.options.speed+"ms ease;"),i.leftArrow.addEventListener("click",function(){var t=h();t-c>i.options.speed&&(c=t,i.elemPrev())},!1),i.rightArrow.addEventListener("click",function(){var t=h();t-c>i.options.speed&&(c=t,i.elemNext())},!1)):(i.leftArrow.style.display="none",i.rightArrow.style.display="none"),i.options.dots){let e="",s;for(let t=0;t<i.dotsVisible;t++)e+='<span class="ant-dot"></span>';i.indicatorDots.innerHTML=e,i.indicatorDotsAll=i.crslRoot.querySelectorAll("span.ant-dot");for(let t=0;t<i.dotsVisible;t++)i.indicatorDotsAll[t].addEventListener("click",function(){s=Math.abs(t-i.currentElement),t<i.currentElement?(c=h(),i.elemPrev(s)):t>i.currentElement&&(c=h(),i.elemNext(s))},!1);i.dotOff(0);for(let t=1;t<i.dotsVisible;t++)i.dotOn(t)}},new Ant;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
